version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile
    env_file:
      - ./backend/.env
    environment:
      - SERVER_ADDRESS=:8080
      - REDIS_ADDRESS=redis:6379
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_MAX_AGE=86400
      - SESSION_TIMEOUT=3600
      - SESSION_SECURE=true
      - LOG_LEVEL=info
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      - redis
    restart: always
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
      dockerfile: docker/Dockerfile
    env_file:
      - ./frontend/.env
    networks:
      - web
    restart: always

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
    restart: always
    networks:
      - web

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - web

  redis:
    image: redis:7.2-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./backend/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
      - redis_logs:/var/log/redis
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: always
    networks:
      - internal

networks:
  internal:
    internal: true
  web:
    driver: bridge

volumes:
  redis_data:
  redis_logs: 